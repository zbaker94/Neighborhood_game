<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
mySpeed = 5
isMoving = false
soundIsPlaying = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//leaving the world
if(x &lt; 0){
    x = room_width - 32
}

if(x &gt; room_width){
    x = 32
}

if y &gt; room_height{
    y = 32
}

if y &lt; 0{
    y = room_height -32
}



//keyboard handling
if keyboard_check(vk_up) or keyboard_check(ord("W")) {
o_player.y -= mySpeed
isMoving = true
}
if keyboard_check(vk_down) or keyboard_check(ord("S")){
o_player.y+= mySpeed
isMoving = true
}
if keyboard_check(vk_left)or keyboard_check(ord("A")){
o_player.x -= mySpeed
isMoving = true
}
if keyboard_check (vk_right)or keyboard_check(ord("D")){
o_player.x+= mySpeed
isMoving = true
}
if keyboard_check(vk_nokey){
isMoving = false
}

image_angle = point_direction(x, y, mouse_x, mouse_y);

if isMoving == true &amp;&amp; soundIsPlaying == false{
audio_play_sound(a_walking,1,true)
soundIsPlaying = true
}

if isMoving == false{
audio_stop_sound(a_walking)
soundIsPlaying = false
}

//debug handling
currentGuy = instance_place(mouse_x,mouse_y,o_npc)

if instance_exists(currentGuy){

global.currentHome = currentGuy.homenum
global.CurrentName = currentGuy.name
global.currentObjective = currentGuy.objective
global.isHome = currentGuy.isHome
global.personality = currentGuy.personality
global.isMoving = currentGuy.isMoving
global.timer0 = currentGuy.alarm[0]
global.timerisSet = currentGuy.waitHasBeenSet

//control npc's a little
if keyboard_check_pressed(vk_space){

currentGuy.objective = "go home"
}
if keyboard_check_pressed(vk_shift){

currentGuy.objective = "look"
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
